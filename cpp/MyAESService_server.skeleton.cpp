// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MyAESService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class MyAESServiceHandler : virtual public MyAESServiceIf {
 public:
  MyAESServiceHandler() {
    // Your initialization goes here
  }

  void AESEncode(std::string& _return, const std::string& encodeRules, const std::string& content) {
    // Your implementation goes here
    printf("AESEncode\n");
  }

  void AESDecode(std::string& _return, const std::string& encodeRules, const std::string& content) {
    // Your implementation goes here
    printf("AESDecode\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<MyAESServiceHandler> handler(new MyAESServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new MyAESServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

